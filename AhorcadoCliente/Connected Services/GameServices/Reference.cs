//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AhorcadoCliente.GameServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchGame", Namespace="http://schemas.datacontract.org/2004/07/AhorcadoServicios.Model.POCO")]
    [System.SerializableAttribute()]
    public partial class MatchGame : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChallengerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateMatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailChallengerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> GuestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MatchLanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameChallengerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RemainingAttemptsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<char> SelectLetterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusMatchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WinnerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerNicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WordIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChallengerID {
            get {
                return this.ChallengerIDField;
            }
            set {
                if ((this.ChallengerIDField.Equals(value) != true)) {
                    this.ChallengerIDField = value;
                    this.RaisePropertyChanged("ChallengerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateMatch {
            get {
                return this.DateMatchField;
            }
            set {
                if ((object.ReferenceEquals(this.DateMatchField, value) != true)) {
                    this.DateMatchField = value;
                    this.RaisePropertyChanged("DateMatch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailChallenger {
            get {
                return this.EmailChallengerField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailChallengerField, value) != true)) {
                    this.EmailChallengerField = value;
                    this.RaisePropertyChanged("EmailChallenger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> GuestID {
            get {
                return this.GuestIDField;
            }
            set {
                if ((this.GuestIDField.Equals(value) != true)) {
                    this.GuestIDField = value;
                    this.RaisePropertyChanged("GuestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchID {
            get {
                return this.MatchIDField;
            }
            set {
                if ((this.MatchIDField.Equals(value) != true)) {
                    this.MatchIDField = value;
                    this.RaisePropertyChanged("MatchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MatchLanguage {
            get {
                return this.MatchLanguageField;
            }
            set {
                if ((this.MatchLanguageField.Equals(value) != true)) {
                    this.MatchLanguageField = value;
                    this.RaisePropertyChanged("MatchLanguage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickNameChallenger {
            get {
                return this.NickNameChallengerField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameChallengerField, value) != true)) {
                    this.NickNameChallengerField = value;
                    this.RaisePropertyChanged("NickNameChallenger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RemainingAttempts {
            get {
                return this.RemainingAttemptsField;
            }
            set {
                if ((this.RemainingAttemptsField.Equals(value) != true)) {
                    this.RemainingAttemptsField = value;
                    this.RaisePropertyChanged("RemainingAttempts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<char> SelectLetter {
            get {
                return this.SelectLetterField;
            }
            set {
                if ((this.SelectLetterField.Equals(value) != true)) {
                    this.SelectLetterField = value;
                    this.RaisePropertyChanged("SelectLetter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusMatchID {
            get {
                return this.StatusMatchIDField;
            }
            set {
                if ((this.StatusMatchIDField.Equals(value) != true)) {
                    this.StatusMatchIDField = value;
                    this.RaisePropertyChanged("StatusMatchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WinnerID {
            get {
                return this.WinnerIDField;
            }
            set {
                if ((this.WinnerIDField.Equals(value) != true)) {
                    this.WinnerIDField = value;
                    this.RaisePropertyChanged("WinnerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WinnerNickname {
            get {
                return this.WinnerNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerNicknameField, value) != true)) {
                    this.WinnerNicknameField = value;
                    this.RaisePropertyChanged("WinnerNickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WordID {
            get {
                return this.WordIDField;
            }
            set {
                if ((this.WordIDField.Equals(value) != true)) {
                    this.WordIDField = value;
                    this.RaisePropertyChanged("WordID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IGameServices")]
    public interface IGameServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/createMatch", ReplyAction="http://tempuri.org/IGameServices/createMatchResponse")]
        AhorcadoCliente.GameServices.MatchGame createMatch([System.ServiceModel.MessageParameterAttribute(Name="createMatch")] AhorcadoCliente.GameServices.MatchGame createMatch1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/createMatch", ReplyAction="http://tempuri.org/IGameServices/createMatchResponse")]
        System.Threading.Tasks.Task<AhorcadoCliente.GameServices.MatchGame> createMatchAsync(AhorcadoCliente.GameServices.MatchGame createMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getMatchList", ReplyAction="http://tempuri.org/IGameServices/getMatchListResponse")]
        AhorcadoCliente.GameServices.MatchGame[] getMatchList(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getMatchList", ReplyAction="http://tempuri.org/IGameServices/getMatchListResponse")]
        System.Threading.Tasks.Task<AhorcadoCliente.GameServices.MatchGame[]> getMatchListAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getMatchesPlayed", ReplyAction="http://tempuri.org/IGameServices/getMatchesPlayedResponse")]
        AhorcadoCliente.GameServices.MatchGame[] getMatchesPlayed(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getMatchesPlayed", ReplyAction="http://tempuri.org/IGameServices/getMatchesPlayedResponse")]
        System.Threading.Tasks.Task<AhorcadoCliente.GameServices.MatchGame[]> getMatchesPlayedAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/initMatchGame", ReplyAction="http://tempuri.org/IGameServices/initMatchGameResponse")]
        bool initMatchGame(int guestID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/initMatchGame", ReplyAction="http://tempuri.org/IGameServices/initMatchGameResponse")]
        System.Threading.Tasks.Task<bool> initMatchGameAsync(int guestID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/leaveMatch", ReplyAction="http://tempuri.org/IGameServices/leaveMatchResponse")]
        bool leaveMatch(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/leaveMatch", ReplyAction="http://tempuri.org/IGameServices/leaveMatchResponse")]
        System.Threading.Tasks.Task<bool> leaveMatchAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/finishMatch", ReplyAction="http://tempuri.org/IGameServices/finishMatchResponse")]
        bool finishMatch(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/finishMatch", ReplyAction="http://tempuri.org/IGameServices/finishMatchResponse")]
        System.Threading.Tasks.Task<bool> finishMatchAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateCharBD", ReplyAction="http://tempuri.org/IGameServices/updateCharBDResponse")]
        bool updateCharBD(char letter, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateCharBD", ReplyAction="http://tempuri.org/IGameServices/updateCharBDResponse")]
        System.Threading.Tasks.Task<bool> updateCharBDAsync(char letter, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getMatchStatus", ReplyAction="http://tempuri.org/IGameServices/getMatchStatusResponse")]
        int getMatchStatus(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getMatchStatus", ReplyAction="http://tempuri.org/IGameServices/getMatchStatusResponse")]
        System.Threading.Tasks.Task<int> getMatchStatusAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/updateRemainingAttemptsResponse")]
        bool updateRemainingAttempts(int remainingAttempts, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/updateRemainingAttemptsResponse")]
        System.Threading.Tasks.Task<bool> updateRemainingAttemptsAsync(int remainingAttempts, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateWinner", ReplyAction="http://tempuri.org/IGameServices/updateWinnerResponse")]
        bool updateWinner(int playerID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateWinner", ReplyAction="http://tempuri.org/IGameServices/updateWinnerResponse")]
        System.Threading.Tasks.Task<bool> updateWinnerAsync(int playerID, int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getGuestNickName", ReplyAction="http://tempuri.org/IGameServices/getGuestNickNameResponse")]
        string getGuestNickName(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getGuestNickName", ReplyAction="http://tempuri.org/IGameServices/getGuestNickNameResponse")]
        System.Threading.Tasks.Task<string> getGuestNickNameAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/isThereGuest", ReplyAction="http://tempuri.org/IGameServices/isThereGuestResponse")]
        bool isThereGuest(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/isThereGuest", ReplyAction="http://tempuri.org/IGameServices/isThereGuestResponse")]
        System.Threading.Tasks.Task<bool> isThereGuestAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getGuestLetter", ReplyAction="http://tempuri.org/IGameServices/getGuestLetterResponse")]
        System.Nullable<char> getGuestLetter(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getGuestLetter", ReplyAction="http://tempuri.org/IGameServices/getGuestLetterResponse")]
        System.Threading.Tasks.Task<System.Nullable<char>> getGuestLetterAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/getRemainingAttemptsResponse")]
        int getRemainingAttempts(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/getRemainingAttempts", ReplyAction="http://tempuri.org/IGameServices/getRemainingAttemptsResponse")]
        System.Threading.Tasks.Task<int> getRemainingAttemptsAsync(int matchID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updatePointsEarned", ReplyAction="http://tempuri.org/IGameServices/updatePointsEarnedResponse")]
        void updatePointsEarned(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updatePointsEarned", ReplyAction="http://tempuri.org/IGameServices/updatePointsEarnedResponse")]
        System.Threading.Tasks.Task updatePointsEarnedAsync(int playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateNameWinner", ReplyAction="http://tempuri.org/IGameServices/updateNameWinnerResponse")]
        int updateNameWinner(int matchID, string nameWinner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameServices/updateNameWinner", ReplyAction="http://tempuri.org/IGameServices/updateNameWinnerResponse")]
        System.Threading.Tasks.Task<int> updateNameWinnerAsync(int matchID, string nameWinner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServicesChannel : AhorcadoCliente.GameServices.IGameServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServicesClient : System.ServiceModel.ClientBase<AhorcadoCliente.GameServices.IGameServices>, AhorcadoCliente.GameServices.IGameServices {
        
        public GameServicesClient() {
        }
        
        public GameServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AhorcadoCliente.GameServices.MatchGame createMatch(AhorcadoCliente.GameServices.MatchGame createMatch1) {
            return base.Channel.createMatch(createMatch1);
        }
        
        public System.Threading.Tasks.Task<AhorcadoCliente.GameServices.MatchGame> createMatchAsync(AhorcadoCliente.GameServices.MatchGame createMatch) {
            return base.Channel.createMatchAsync(createMatch);
        }
        
        public AhorcadoCliente.GameServices.MatchGame[] getMatchList(int playerID) {
            return base.Channel.getMatchList(playerID);
        }
        
        public System.Threading.Tasks.Task<AhorcadoCliente.GameServices.MatchGame[]> getMatchListAsync(int playerID) {
            return base.Channel.getMatchListAsync(playerID);
        }
        
        public AhorcadoCliente.GameServices.MatchGame[] getMatchesPlayed(int playerID) {
            return base.Channel.getMatchesPlayed(playerID);
        }
        
        public System.Threading.Tasks.Task<AhorcadoCliente.GameServices.MatchGame[]> getMatchesPlayedAsync(int playerID) {
            return base.Channel.getMatchesPlayedAsync(playerID);
        }
        
        public bool initMatchGame(int guestID, int matchID) {
            return base.Channel.initMatchGame(guestID, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> initMatchGameAsync(int guestID, int matchID) {
            return base.Channel.initMatchGameAsync(guestID, matchID);
        }
        
        public bool leaveMatch(int matchID) {
            return base.Channel.leaveMatch(matchID);
        }
        
        public System.Threading.Tasks.Task<bool> leaveMatchAsync(int matchID) {
            return base.Channel.leaveMatchAsync(matchID);
        }
        
        public bool finishMatch(int matchID) {
            return base.Channel.finishMatch(matchID);
        }
        
        public System.Threading.Tasks.Task<bool> finishMatchAsync(int matchID) {
            return base.Channel.finishMatchAsync(matchID);
        }
        
        public bool updateCharBD(char letter, int matchID) {
            return base.Channel.updateCharBD(letter, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> updateCharBDAsync(char letter, int matchID) {
            return base.Channel.updateCharBDAsync(letter, matchID);
        }
        
        public int getMatchStatus(int matchID) {
            return base.Channel.getMatchStatus(matchID);
        }
        
        public System.Threading.Tasks.Task<int> getMatchStatusAsync(int matchID) {
            return base.Channel.getMatchStatusAsync(matchID);
        }
        
        public bool updateRemainingAttempts(int remainingAttempts, int matchID) {
            return base.Channel.updateRemainingAttempts(remainingAttempts, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> updateRemainingAttemptsAsync(int remainingAttempts, int matchID) {
            return base.Channel.updateRemainingAttemptsAsync(remainingAttempts, matchID);
        }
        
        public bool updateWinner(int playerID, int matchID) {
            return base.Channel.updateWinner(playerID, matchID);
        }
        
        public System.Threading.Tasks.Task<bool> updateWinnerAsync(int playerID, int matchID) {
            return base.Channel.updateWinnerAsync(playerID, matchID);
        }
        
        public string getGuestNickName(int playerID) {
            return base.Channel.getGuestNickName(playerID);
        }
        
        public System.Threading.Tasks.Task<string> getGuestNickNameAsync(int playerID) {
            return base.Channel.getGuestNickNameAsync(playerID);
        }
        
        public bool isThereGuest(int matchID) {
            return base.Channel.isThereGuest(matchID);
        }
        
        public System.Threading.Tasks.Task<bool> isThereGuestAsync(int matchID) {
            return base.Channel.isThereGuestAsync(matchID);
        }
        
        public System.Nullable<char> getGuestLetter(int matchID) {
            return base.Channel.getGuestLetter(matchID);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<char>> getGuestLetterAsync(int matchID) {
            return base.Channel.getGuestLetterAsync(matchID);
        }
        
        public int getRemainingAttempts(int matchID) {
            return base.Channel.getRemainingAttempts(matchID);
        }
        
        public System.Threading.Tasks.Task<int> getRemainingAttemptsAsync(int matchID) {
            return base.Channel.getRemainingAttemptsAsync(matchID);
        }
        
        public void updatePointsEarned(int playerID) {
            base.Channel.updatePointsEarned(playerID);
        }
        
        public System.Threading.Tasks.Task updatePointsEarnedAsync(int playerID) {
            return base.Channel.updatePointsEarnedAsync(playerID);
        }
        
        public int updateNameWinner(int matchID, string nameWinner) {
            return base.Channel.updateNameWinner(matchID, nameWinner);
        }
        
        public System.Threading.Tasks.Task<int> updateNameWinnerAsync(int matchID, string nameWinner) {
            return base.Channel.updateNameWinnerAsync(matchID, nameWinner);
        }
    }
}
